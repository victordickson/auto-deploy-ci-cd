version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow_id:
        type: string
        default: ${CIRCLE_WORKFLOW_ID}  
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            if aws s3 ls | grep udapeople-<<parameters.workflow_id>>; then
              aws s3 rm s3://udapeople-<<parameters.workflow_id>> --recursive
            fi
            aws cloudformation delete-stack --stack-name frontend-<<parameters.workflow_id>>
            aws cloudformation delete-stack --stack-name backend-<<parameters.workflow_id>>
      - revert-migrations:
          workflow_id: <<parameters.workflow_id>>

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      workflow_id:
        type: string 
        default: ${CIRCLE_WORKFLOW_ID:0:7}   
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl -H "token: <<parameters.workflow_id>>" \
              --request GET https://api.memstash.io/values/migration-<<parameters.workflow_id>>)
            echo $SUCCESS
            if(( $SUCCESS==1 )); 
            then
            cd ~/project/backend
            npm install
            npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cat \<< EOF > backend/.env
            ENVIRONMENT=production
            VERSION=1
            TYPEORM_CONNECTION=postgres
            TYPEORM_MIGRATIONS_DIR=./src/migrations
            TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts
            TYPEORM_MIGRATIONS=./src/migrations/*.ts
            TYPEORM_HOST=${TYPEORM_HOST}
            TYPEORM_PORT=${TYPEORM_PORT}
            TYPEORM_USERNAME=${TYPEORM_USERNAME}
            TYPEORM_PASSWORD=${TYPEORM_PASSWORD}
            TYPEORM_DATABASE=${TYPEORM_DATABASE}
            EOF
      - run:
          name: Back-end build
          command: |
            cd backend
            cat .env
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build


  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend tests
          command: |
            cd frontend
            npm i
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend tests
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: frontend scan
          command: |
            cd frontend
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: backend scan
          command: |
            cd backend
            npm audit --audit-level=critical

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople-backend \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"

            export BACKEND_URL=$(aws cloudformation describe-stacks \
              --stack-name backend-"${CIRCLE_WORKFLOW_ID}" \
              --query "Stacks[0].Outputs[?OutputKey=='BackendURL'].OutputValue" \
              --no-paginate --output text)

            echo $BACKEND_URL
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${BACKEND_URL}" \
              https://api.memstash.io/values/backendurl  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople-frontend \
              --stack-name frontend-"${CIRCLE_WORKFLOW_ID}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            export BACKEND_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl)

            echo "${BACKEND_URL}" >> .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
      - run: yum -y install tar gzip
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
            # This command has a when: on_fail
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"     

  configure-infrastructure:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "af:a5:4f:74:9a:2b:a5:53:c3:1d:b9:0a:4b:6d:96:b9"
      - attach_workspace:
          at: /tmp/.circleci/ansible
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible aws-cli
      - run:
          name: Configure server
          command: |
            ansible-playbook -i /tmp/.circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"     

  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            cat .env
            npm i
            npm run build
            npm run migrations 2>&1 | tee migration-log.txt
            status_code="${PIPESTATUS[0]}"
            if [[ ! "${status_code}" == 0 ]]; then
              return 1
            fi
            if cat migration-log.txt | grep "has been executed successfully"; then
              curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
                --request PUT --data "1" \
                https://api.memstash.io/values/migration-"${CIRCLE_WORKFLOW_ID}"
            fi
      - persist_to_workspace:
          root: ~/project
          paths:
            - backend

      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"
     

  deploy-frontend:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            yum install -y curl tar sudo
            curl -sL https://rpm.nodesource.com/setup_13.x | sudo bash -
            yum install -y nodejs
            node --version
      - run:
          name: Get backend url
          command: |
            export API_URL=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            export API_URL=$(cat .circleci/api_url.txt)
            echo "${API_URL}" > frontend/.env
            cd frontend
            npm i
            npm run build
            aws s3 cp dist s3://udapeople-"${CIRCLE_WORKFLOW_ID}" --recursive
      - destroy-environment:
          workflow_id: ${CIRCLE_WORKFLOW_ID}      
                    
  deploy-backend:
    docker:
      - image: python:3.9.1-alpine3.12
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints:
            - "af:a5:4f:74:9a:2b:a5:53:c3:1d:b9:0a:4b:6d:96:b9"
      - restore_cache:
          keys: [backend-build]
      - attach_workspace:
          at: /tmp/artifacts
      - run:
          name: Install dependencies
          command: |
            apk update
            apk add --update ansible aws-cli openssh-client tar
      - run:
          name: Deploy backend
          command: |
            cd .circleci/ansible
            export ANSIBLE_HOST_KEY_CHECKING=False
            ansible-playbook -i /tmp/artifacts/inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}"  

  smoke-test:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt update
            sudo apt install -y awscli
            sudo apt install -y python3 ansible
      - run:
          name: Get backend url
          command: |
             curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request GET https://api.memstash.io/values/backendurl \
              > backend-url.txt
      - run:
          name: Backend smoke test.
          command: |
            url=$(cat backend-url.txt)
            url="http://${url}:3030/api/status"
            curl $url
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID}.s3-website-us-east-1.amazonaws.com"
            curl -s "${URL}"
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}" 

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y curl
      - run:
          name: Update cloudfront distribution
          command: |
            export OldWorkflowID=$(aws cloudformation \
              list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
              --no-paginate --output text)
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
              --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
            echo "${OldWorkflowID}"
            echo "${STACKS[@]}"
            # save oldworkflowid for the cleanup phase
            curl -H "Content-Type: text/plain" -H "token: ${CIRCLE_WORKFLOW_ID}" \
              --request PUT --data "${OldWorkflowID}" \
                https://api.memstash.io/values/oldworkflowid
            # promote
            aws cloudformation update-stack \
              --use-previous-template \
              --stack-name cloudfront-${OldWorkflowID} \
              --parameters ParameterKey=WorkflowID,ParameterValue=$CIRCLE_WORKFLOW_ID,UsePreviousValue=false
      # Here's where you will add some code to rollback on failure 
      - destroy-environment:
          workflow_id: "${CIRCLE_WORKFLOW_ID}" 

cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
           export OldWorkflowID=$(curl -H "token: ${CIRCLE_WORKFLOW_ID}" \
             --request GET https://api.memstash.io/values/oldworkflowid)
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm s3://udapeople-"${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name frontend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name backend-"${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name cloudfront-"${OldWorkflowID}"
            fi
            

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]